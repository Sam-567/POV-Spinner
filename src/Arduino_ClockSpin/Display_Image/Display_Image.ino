
#include <Adafruit_NeoPixel.h>

unsigned long totalTime = 0;
unsigned long average;
unsigned long currentTime = 0;

int standard = 530;
int tolerance = 12;
int readPin = A0;

#define PIN 6
#define TRUEPIXELS 28
#define NUMPIXELS 14
#define NUMTURNS 30

const  byte PROGMEM image[][30][NUMPIXELS] = { 
 {
 { 38, 175, 201, 111, 222, 252, 145, 157, 134, 211, 218, 204, 9, 0 },
 { 37, 164, 182, 181, 62, 152, 189, 176, 138, 184, 126, 17, 0, 0 },
 { 37, 127, 93, 189, 187, 150, 162, 145, 67, 18, 0, 0, 0, 0 },
 { 35, 58, 22, 81, 69, 71, 63, 7, 0, 0, 0, 0, 0, 0 },
 { 34, 39, 40, 164, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 118, 171, 174, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 123, 189, 164, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 45, 87, 133, 217, 78, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 26, 25, 77, 219, 235, 133, 24, 0, 0, 0, 0, 0, 0 },
 { 33, 29, 27, 41, 139, 240, 249, 229, 88, 0, 0, 0, 0, 0 },
 { 33, 29, 25, 27, 27, 173, 221, 208, 87, 0, 0, 0, 0, 0 },
 { 35, 29, 24, 21, 28, 32, 75, 11, 0, 0, 0, 0, 0, 0 },
 { 35, 29, 23, 18, 17, 25, 28, 20, 15, 13, 69, 60, 15, 0 },
 { 36, 30, 23, 16, 16, 31, 31, 30, 31, 90, 197, 165, 102, 0 },
 { 37, 31, 22, 17, 19, 21, 24, 22, 20, 31, 99, 72, 3, 0 },
 { 38, 33, 23, 17, 20, 16, 14, 15, 13, 21, 63, 50, 2, 0 },
 { 40, 35, 25, 17, 19, 26, 28, 30, 31, 77, 175, 154, 110, 0 },
 { 40, 37, 27, 20, 23, 34, 37, 28, 20, 16, 81, 80, 23, 0 },
 { 41, 39, 30, 25, 30, 26, 61, 9, 0, 0, 0, 0, 0, 0 },
 { 42, 41, 33, 31, 26, 120, 187, 198, 107, 0, 0, 0, 0, 0 },
 { 42, 43, 37, 44, 90, 202, 240, 248, 122, 0, 0, 0, 0, 0 },
 { 43, 40, 37, 92, 211, 242, 155, 32, 0, 0, 0, 0, 0, 0 },
 { 43, 43, 109, 186, 249, 98, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 107, 221, 239, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 102, 190, 251, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 40, 51, 233, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 40, 100, 50, 104, 81, 87, 83, 13, 0, 0, 0, 0, 0, 0 },
 { 40, 174, 137, 221, 207, 163, 203, 186, 89, 30, 0, 0, 0, 0 },
 { 39, 194, 208, 215, 92, 173, 208, 210, 151, 232, 158, 23, 0, 0 },
 { 39, 184, 221, 126, 234, 253, 158, 165, 140, 224, 232, 219, 11, 0 } },
 {
 { 96, 20, 133, 76, 159, 192, 133, 123, 39, 67, 82, 42, 3, 0 },
 { 96, 23, 104, 129, 47, 112, 164, 128, 28, 19, 22, 5, 0, 0 },
 { 95, 36, 35, 139, 134, 106, 102, 87, 19, 7, 0, 0, 0, 0 },
 { 95, 59, 51, 48, 54, 52, 44, 5, 0, 0, 0, 0, 0, 0 },
 { 93, 89, 63, 17, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 145, 123, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 143, 140, 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 88, 102, 11, 7, 13, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 82, 72, 31, 8, 134, 132, 23, 0, 0, 0, 0, 0, 0 },
 { 93, 88, 81, 64, 57, 234, 243, 226, 90, 0, 0, 0, 0, 0 },
 { 93, 87, 79, 69, 36, 169, 218, 208, 90, 0, 0, 0, 0, 0 },
 { 94, 87, 77, 64, 59, 40, 76, 12, 0, 0, 0, 0, 0, 0 },
 { 94, 87, 76, 60, 58, 79, 69, 47, 31, 21, 41, 35, 11, 0 },
 { 95, 87, 74, 57, 55, 88, 89, 88, 88, 82, 107, 86, 67, 0 },
 { 96, 88, 74, 57, 50, 54, 60, 55, 50, 53, 56, 48, 2, 0 },
 { 97, 91, 76, 57, 51, 40, 37, 35, 32, 37, 43, 36, 1, 0 },
 { 98, 93, 79, 60, 62, 80, 83, 86, 87, 78, 93, 83, 71, 0 },
 { 99, 95, 84, 66, 73, 93, 90, 64, 43, 28, 48, 45, 15, 0 },
 { 100, 98, 88, 75, 72, 43, 63, 10, 0, 0, 0, 0, 0, 0 },
 { 101, 100, 92, 83, 42, 122, 188, 198, 108, 0, 0, 0, 0, 0 },
 { 101, 102, 98, 87, 36, 200, 235, 244, 120, 0, 0, 0, 0, 0 },
 { 101, 96, 94, 54, 6, 129, 151, 31, 0, 0, 0, 0, 0, 0 },
 { 101, 89, 134, 23, 17, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 130, 178, 11, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 129, 153, 15, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 92, 101, 26, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 71, 84, 58, 63, 66, 64, 10, 0, 0, 0, 0, 0, 0 },
 { 100, 44, 41, 156, 145, 126, 134, 112, 19, 8, 0, 0, 0, 0 },
 { 98, 28, 119, 152, 69, 140, 192, 156, 29, 19, 24, 6, 0, 0 },
 { 97, 22, 146, 85, 168, 209, 147, 128, 42, 74, 94, 49, 3, 0 } },
 {
 { 224, 43, 110, 67, 129, 151, 143, 119, 35, 72, 87, 47, 3, 0 },
 { 223, 53, 87, 107, 45, 98, 160, 110, 27, 24, 27, 7, 0, 0 },
 { 223, 84, 64, 125, 111, 93, 83, 74, 22, 8, 0, 0, 0, 0 },
 { 222, 150, 150, 82, 46, 44, 36, 4, 0, 0, 0, 0, 0, 0 },
 { 221, 197, 154, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 143, 72, 4, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 138, 67, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 182, 131, 27, 10, 16, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 208, 191, 84, 10, 134, 132, 23, 0, 0, 0, 0, 0, 0 },
 { 221, 216, 207, 164, 63, 232, 240, 226, 93, 0, 0, 0, 0, 0 },
 { 221, 215, 204, 182, 71, 170, 219, 212, 96, 0, 0, 0, 0, 0 },
 { 222, 215, 202, 178, 153, 67, 80, 13, 0, 0, 0, 0, 0, 0 },
 { 222, 214, 200, 173, 171, 202, 172, 115, 73, 45, 31, 28, 11, 0 },
 { 223, 215, 197, 170, 165, 216, 217, 216, 214, 143, 73, 59, 49, 0 },
 { 224, 216, 197, 168, 147, 138, 144, 129, 118, 116, 47, 39, 1, 0 },
 { 225, 218, 200, 169, 146, 111, 104, 95, 87, 90, 43, 34, 1, 0 },
 { 226, 220, 205, 174, 177, 205, 209, 212, 213, 146, 64, 61, 50, 0 },
 { 226, 222, 211, 184, 194, 220, 205, 142, 94, 59, 35, 33, 13, 0 },
 { 227, 225, 216, 197, 180, 86, 72, 11, 0, 0, 0, 0, 0, 0 },
 { 227, 227, 220, 206, 87, 133, 196, 205, 112, 0, 0, 0, 0, 0 },
 { 228, 229, 226, 203, 49, 207, 234, 241, 120, 0, 0, 0, 0, 0 },
 { 228, 220, 220, 123, 8, 130, 149, 31, 0, 0, 0, 0, 0, 0 },
 { 228, 193, 155, 48, 21, 18, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 151, 81, 14, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 154, 95, 18, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 210, 218, 39, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 160, 198, 104, 53, 54, 51, 8, 0, 0, 0, 0, 0, 0 },
 { 227, 92, 64, 135, 117, 107, 104, 89, 24, 10, 0, 0, 0, 0 },
 { 225, 57, 97, 121, 65, 121, 183, 131, 28, 25, 30, 7, 0, 0 },
 { 224, 45, 118, 72, 134, 166, 151, 122, 36, 78, 98, 55, 4, 0 } } };


Adafruit_NeoPixel pixels = Adafruit_NeoPixel(TRUEPIXELS, PIN, NEO_GRB + NEO_KHZ800);


void setup() {
  pixels.begin();
  
  Serial.begin(9600);

  unsigned long test = 1234;
  unsigned long x =test/3;
  Serial.println(x);

  int i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(120,120,0));
    i++;
  }
  pixels.show();

  pinMode(readPin, INPUT);
  delay(10000);

  i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    i++;
  }
  pixels.show();
  
  average = averageSpin();
  Serial.println(average);
}

unsigned long averageSpin(){

  
  int i = 0;
  unsigned long lastTime = millis();
  unsigned long currentTime;
  while( i < 40 ){
    while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
      delay(1);
    }
    currentTime = millis();
    totalTime += currentTime - lastTime;
    lastTime = currentTime;
    delay(25);
    i++;
  }

  unsigned long average = totalTime / 40;
  return average;
}

void loop() {

  currentTime = millis();
  while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
    delayMicroseconds(100);
  }

  unsigned long CurrentTime = millis();
  
  for (int arg = 0; arg < NUMTURNS; arg++) {
    
    for (int mod = 0; mod < NUMPIXELS; mod++) {
      pixels.setPixelColor( mod, pixels.Color( pgm_read_byte(&(image[0, arg, mod])), pgm_read_byte(&(image[1, arg, mod])), pgm_read_byte(&(image[2, arg, mod])) ) );
    }
    while ( millis() - currentTime < (arg*average)/NUMTURNS){
      delayMicroseconds(100);
    }
    pixels.show();
  }

}
