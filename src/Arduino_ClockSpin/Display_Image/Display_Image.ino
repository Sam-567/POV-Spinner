
#include <Adafruit_NeoPixel.h>

unsigned long totalTime = 0;
double average;
unsigned long currentTime = 0;

int standard = 530;
int tolerance = 12;
int readPin = A0;

#define PIN 6
#define TRUEPIXELS 28
#define NUMPIXELS 14
#define NUMTURNS 60.0

const PROGMEM byte image[][60][NUMPIXELS] = { 
 {
 { 38, 33, 24, 18, 24, 20, 15, 15, 9, 13, 30, 9, 0, 0 },
 { 40, 35, 24, 17, 15, 15, 16, 18, 20, 27, 102, 104, 9, 0 },
 { 41, 35, 25, 17, 17, 24, 25, 27, 27, 69, 150, 133, 90, 0 },
 { 40, 36, 26, 18, 21, 30, 33, 35, 36, 73, 208, 186, 147, 0 },
 { 40, 37, 28, 20, 23, 34, 35, 39, 36, 26, 138, 147, 42, 0 },
 { 42, 38, 28, 21, 24, 33, 38, 12, 0, 0, 0, 0, 0, 0 },
 { 42, 39, 29, 24, 28, 32, 1, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 40, 32, 27, 34, 23, 146, 36, 0, 0, 0, 0, 0, 0 },
 { 42, 41, 32, 31, 26, 104, 192, 188, 77, 0, 0, 0, 0, 0 },
 { 42, 42, 34, 34, 28, 163, 184, 221, 150, 0, 0, 0, 0, 0 },
 { 42, 42, 37, 42, 73, 195, 235, 250, 172, 0, 0, 0, 0, 0 },
 { 43, 43, 39, 54, 139, 224, 251, 240, 38, 0, 0, 0, 0, 0 },
 { 43, 41, 37, 84, 206, 242, 213, 35, 0, 0, 0, 0, 0, 0 },
 { 43, 31, 37, 136, 237, 231, 51, 0, 0, 0, 0, 0, 0, 0 },
 { 43, 34, 76, 184, 249, 121, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 43, 95, 172, 227, 245, 19, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 124, 212, 240, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 141, 230, 247, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 133, 211, 251, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 106, 157, 253, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 45, 74, 248, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 37, 41, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 40, 59, 39, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 148, 42, 91, 147, 181, 152, 16, 0, 0, 0, 0, 0, 0 },
 { 40, 185, 85, 205, 253, 246, 221, 171, 0, 0, 0, 0, 0, 0 },
 { 40, 196, 164, 249, 155, 97, 186, 176, 168, 42, 0, 0, 0, 0 },
 { 40, 205, 202, 224, 50, 126, 251, 205, 184, 226, 56, 0, 0, 0 },
 { 39, 195, 223, 182, 131, 220, 187, 188, 148, 233, 227, 28, 0, 0 },
 { 39, 187, 230, 114, 237, 243, 71, 127, 125, 227, 241, 167, 0, 0 },
 { 38, 184, 226, 126, 241, 255, 215, 194, 171, 221, 227, 240, 8, 0 },
 { 39, 179, 215, 129, 237, 255, 231, 200, 169, 218, 219, 236, 9, 0 },
 { 39, 176, 205, 101, 226, 250, 78, 115, 121, 205, 219, 164, 0, 0 },
 { 38, 174, 196, 139, 137, 212, 133, 162, 128, 194, 200, 34, 0, 0 },
 { 38, 171, 183, 184, 21, 125, 226, 186, 152, 179, 60, 0, 0, 0 },
 { 37, 152, 156, 210, 118, 58, 161, 121, 151, 45, 0, 0, 0, 0 },
 { 37, 138, 76, 194, 216, 213, 165, 166, 1, 0, 0, 0, 0, 0 },
 { 36, 105, 32, 89, 182, 183, 155, 27, 0, 0, 0, 0, 0, 0 },
 { 36, 55, 21, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 28, 21, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 32, 31, 176, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 35, 74, 120, 176, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 113, 183, 172, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 121, 210, 168, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 109, 193, 161, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 74, 155, 147, 209, 30, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 24, 63, 116, 213, 134, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 24, 23, 86, 214, 230, 62, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 28, 25, 59, 207, 243, 207, 48, 0, 0, 0, 0, 0, 0 },
 { 34, 29, 27, 43, 172, 243, 248, 231, 49, 0, 0, 0, 0, 0 },
 { 34, 29, 27, 35, 84, 235, 251, 236, 158, 0, 0, 0, 0, 0 },
 { 35, 29, 26, 28, 25, 190, 220, 225, 133, 0, 0, 0, 0, 0 },
 { 34, 29, 25, 25, 29, 119, 222, 211, 75, 0, 0, 0, 0, 0 },
 { 36, 30, 25, 22, 34, 25, 152, 33, 0, 0, 0, 0, 0, 0 },
 { 35, 30, 24, 20, 21, 29, 4, 0, 0, 0, 0, 0, 0, 0 },
 { 36, 30, 24, 18, 17, 23, 30, 15, 0, 0, 0, 0, 0, 0 },
 { 36, 30, 24, 18, 16, 27, 26, 26, 32, 24, 134, 132, 40, 0 },
 { 37, 30, 23, 17, 15, 31, 30, 29, 29, 70, 208, 176, 129, 0 },
 { 37, 31, 23, 16, 15, 29, 32, 32, 32, 82, 183, 162, 100, 0 },
 { 38, 31, 23, 16, 14, 20, 27, 30, 33, 38, 154, 138, 10, 0 },
 { 38, 32, 23, 17, 26, 17, 17, 13, 4, 10, 29, 4, 0, 0 } },
 {
 { 98, 92, 78, 58, 53, 34, 25, 19, 11, 17, 25, 7, 0, 0 },
 { 99, 92, 77, 58, 50, 55, 57, 58, 59, 61, 63, 73, 6, 0 },
 { 99, 94, 80, 60, 58, 77, 79, 82, 82, 74, 76, 71, 59, 0 },
 { 99, 94, 82, 63, 67, 87, 90, 92, 93, 84, 113, 102, 92, 0 },
 { 100, 96, 84, 66, 71, 93, 94, 97, 76, 48, 83, 83, 26, 0 },
 { 101, 97, 86, 69, 74, 92, 77, 20, 0, 0, 0, 0, 0, 0 },
 { 101, 98, 88, 74, 75, 56, 1, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 99, 91, 78, 65, 25, 150, 38, 0, 0, 0, 0, 0, 0 },
 { 101, 100, 91, 82, 43, 106, 192, 190, 78, 0, 0, 0, 0, 0 },
 { 101, 102, 93, 85, 37, 164, 186, 219, 150, 0, 0, 0, 0, 0 },
 { 101, 102, 97, 90, 49, 194, 231, 245, 170, 0, 0, 0, 0, 0 },
 { 101, 102, 100, 75, 25, 219, 245, 236, 37, 0, 0, 0, 0, 0 },
 { 102, 98, 96, 53, 4, 195, 209, 35, 0, 0, 0, 0, 0, 0 },
 { 102, 81, 94, 35, 11, 51, 50, 0, 0, 0, 0, 0, 0, 0 },
 { 102, 80, 112, 21, 16, 18, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 102, 122, 170, 9, 22, 6, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 140, 163, 12, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 152, 148, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 147, 136, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 132, 119, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 96, 91, 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 91, 100, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 81, 98, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 50, 79, 70, 117, 138, 117, 12, 0, 0, 0, 0, 0, 0 },
 { 100, 40, 36, 145, 181, 193, 141, 122, 0, 0, 0, 0, 0, 0 },
 { 99, 35, 62, 176, 106, 75, 119, 80, 38, 13, 0, 0, 0, 0 },
 { 98, 25, 112, 161, 38, 96, 195, 142, 27, 30, 15, 0, 0, 0 },
 { 98, 20, 144, 127, 98, 185, 198, 139, 26, 12, 31, 9, 0, 0 },
 { 98, 17, 157, 78, 172, 206, 102, 111, 18, 30, 43, 29, 0, 0 },
 { 96, 16, 153, 86, 175, 211, 182, 131, 55, 124, 139, 55, 3, 0 },
 { 96, 14, 146, 88, 170, 200, 167, 135, 56, 125, 129, 53, 3, 0 },
 { 97, 15, 141, 69, 162, 189, 100, 102, 20, 32, 46, 26, 0, 0 },
 { 96, 15, 130, 98, 101, 168, 168, 125, 23, 9, 27, 11, 0, 0 },
 { 96, 19, 108, 132, 18, 86, 160, 129, 28, 26, 18, 0, 0, 0 },
 { 96, 26, 66, 153, 84, 43, 103, 52, 40, 17, 0, 0, 0, 0 },
 { 96, 30, 25, 141, 154, 149, 103, 114, 1, 0, 0, 0, 0, 0 },
 { 95, 40, 40, 76, 139, 133, 107, 20, 0, 0, 0, 0, 0, 0 },
 { 96, 64, 53, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 72, 57, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 86, 58, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 116, 105, 4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 142, 135, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 145, 149, 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 135, 156, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 111, 149, 7, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 75, 85, 18, 5, 17, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 77, 66, 29, 7, 40, 58, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 86, 76, 42, 6, 182, 204, 47, 0, 0, 0, 0, 0, 0 },
 { 94, 88, 82, 62, 20, 235, 242, 227, 49, 0, 0, 0, 0, 0 },
 { 94, 88, 82, 72, 55, 228, 245, 232, 160, 0, 0, 0, 0, 0 },
 { 94, 88, 80, 71, 34, 186, 217, 222, 137, 0, 0, 0, 0, 0 },
 { 94, 88, 79, 68, 45, 116, 219, 209, 78, 0, 0, 0, 0, 0 },
 { 96, 88, 79, 66, 62, 26, 152, 34, 0, 0, 0, 0, 0, 0 },
 { 94, 88, 78, 63, 59, 50, 5, 0, 0, 0, 0, 0, 0, 0 },
 { 95, 88, 77, 61, 57, 73, 63, 23, 0, 0, 0, 0, 0, 0 },
 { 96, 88, 77, 60, 56, 84, 81, 76, 68, 44, 80, 77, 29, 0 },
 { 96, 88, 76, 59, 54, 88, 88, 87, 85, 79, 114, 92, 81, 0 },
 { 96, 89, 75, 58, 51, 84, 90, 90, 90, 86, 97, 85, 66, 0 },
 { 97, 89, 75, 58, 49, 67, 83, 84, 86, 86, 84, 91, 7, 0 },
 { 98, 91, 77, 58, 53, 27, 27, 16, 5, 14, 22, 4, 0, 0 } },
 {
 { 225, 219, 202, 171, 146, 80, 58, 39, 20, 32, 27, 8, 0, 0 },
 { 226, 219, 202, 171, 155, 166, 170, 170, 169, 163, 64, 68, 5, 0 },
 { 226, 221, 206, 174, 171, 201, 204, 207, 208, 146, 55, 53, 41, 0 },
 { 226, 222, 209, 178, 185, 214, 218, 219, 220, 164, 74, 71, 68, 0 },
 { 227, 223, 212, 183, 192, 221, 222, 222, 166, 103, 64, 61, 24, 0 },
 { 227, 224, 214, 189, 195, 220, 165, 37, 0, 0, 0, 0, 0, 0 },
 { 227, 225, 216, 196, 195, 117, 2, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 226, 219, 201, 150, 30, 163, 42, 0, 0, 0, 0, 0, 0 },
 { 228, 227, 219, 205, 92, 116, 199, 199, 84, 0, 0, 0, 0, 0 },
 { 228, 228, 221, 209, 68, 176, 195, 221, 153, 0, 0, 0, 0, 0 },
 { 228, 229, 225, 211, 66, 202, 231, 242, 169, 0, 0, 0, 0, 0 },
 { 228, 229, 228, 172, 28, 221, 242, 233, 37, 0, 0, 0, 0, 0 },
 { 228, 223, 221, 121, 5, 194, 207, 34, 0, 0, 0, 0, 0, 0 },
 { 228, 200, 220, 80, 14, 54, 49, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 191, 177, 45, 20, 21, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 157, 118, 13, 27, 7, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 138, 80, 14, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 127, 66, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 127, 75, 19, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 146, 119, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 208, 197, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 213, 227, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 190, 224, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 109, 190, 106, 98, 112, 93, 10, 0, 0, 0, 0, 0, 0 },
 { 227, 82, 94, 132, 141, 153, 109, 97, 0, 0, 0, 0, 0, 0 },
 { 226, 70, 59, 138, 90, 72, 92, 67, 46, 15, 0, 0, 0, 0 },
 { 226, 50, 92, 127, 44, 85, 151, 111, 27, 37, 18, 0, 0, 0 },
 { 225, 38, 116, 103, 87, 162, 216, 121, 26, 15, 39, 10, 0, 0 },
 { 225, 34, 126, 67, 137, 167, 149, 120, 18, 33, 47, 35, 0, 0 },
 { 224, 31, 124, 73, 139, 169, 159, 107, 46, 130, 143, 61, 3, 0 },
 { 223, 29, 120, 76, 136, 156, 137, 109, 46, 132, 135, 59, 3, 0 },
 { 224, 31, 116, 62, 131, 149, 144, 113, 20, 36, 49, 33, 0, 0 },
 { 223, 33, 108, 83, 86, 148, 201, 114, 23, 12, 34, 14, 0, 0 },
 { 223, 41, 90, 109, 22, 73, 129, 107, 28, 33, 22, 0, 0, 0 },
 { 223, 60, 57, 125, 74, 46, 84, 47, 48, 20, 0, 0, 0, 0 },
 { 223, 70, 63, 124, 126, 125, 85, 95, 1, 0, 0, 0, 0, 0 },
 { 222, 96, 122, 110, 118, 112, 88, 17, 0, 0, 0, 0, 0, 0 },
 { 223, 159, 154, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 188, 164, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 209, 161, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 173, 102, 5, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 147, 70, 3, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 147, 54, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 149, 75, 3, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 172, 93, 15, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 197, 140, 47, 6, 21, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 199, 181, 77, 9, 42, 59, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 214, 198, 112, 7, 181, 205, 47, 0, 0, 0, 0, 0, 0 },
 { 222, 216, 209, 160, 21, 232, 239, 227, 50, 0, 0, 0, 0, 0 },
 { 222, 217, 208, 186, 70, 228, 242, 232, 166, 0, 0, 0, 0, 0 },
 { 222, 217, 206, 186, 69, 187, 219, 223, 146, 0, 0, 0, 0, 0 },
 { 222, 216, 205, 184, 99, 117, 220, 213, 83, 0, 0, 0, 0, 0 },
 { 223, 216, 204, 182, 150, 28, 157, 37, 0, 0, 0, 0, 0, 0 },
 { 222, 216, 203, 179, 169, 114, 8, 0, 0, 0, 0, 0, 0, 0 },
 { 223, 215, 202, 177, 169, 194, 154, 48, 0, 0, 0, 0, 0, 0 },
 { 223, 215, 201, 174, 168, 211, 206, 198, 161, 101, 64, 61, 29, 0 },
 { 224, 215, 200, 172, 165, 215, 216, 214, 212, 158, 74, 61, 63, 0 },
 { 224, 216, 199, 171, 159, 210, 218, 218, 217, 159, 68, 60, 45, 0 },
 { 225, 216, 198, 170, 152, 182, 208, 209, 209, 202, 70, 75, 5, 0 },
 { 224, 218, 201, 170, 144, 62, 54, 29, 8, 25, 22, 3, 0, 0 } } };


Adafruit_NeoPixel pixels = Adafruit_NeoPixel(TRUEPIXELS, PIN, NEO_GRB + NEO_KHZ800);


void setup() {
  pixels.begin();
  
  Serial.begin(9600);


  int i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(120,120,0));
    i++;
  }
  pixels.show();

  pinMode(readPin, INPUT);
  delay(10000);

  i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    i++;
  }
  pixels.show();
  
  average = averageSpin();
}


double averageSpin(){
  int i = 0;
  unsigned long lastTime = micros();
  unsigned long currentTime;
  while( i < 40 ){
    while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
      delayMicroseconds(100);
    }
    currentTime = micros();
    totalTime += currentTime - lastTime;
    lastTime = currentTime;
    delay(25);
    i++;
  }

  double average = totalTime / 40.0;

  return average;
}


void loop() {

  
  while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
    delayMicroseconds(100);
  }
  
  currentTime = micros();
  
  for (int arg = 0; arg < NUMTURNS; arg++) {
    
    for (int mod = 0; mod < NUMPIXELS; mod++) {
      pixels.setPixelColor( 13 - mod, pgm_read_byte(&(image[0][arg][mod])), pgm_read_byte(&(image[1][arg][mod])), pgm_read_byte(&(image[2][arg][mod])) );
    }
    while ( micros() - currentTime <  ((double) arg)*(average/(NUMTURNS))){
      delayMicroseconds(100);
    }
    pixels.show();
  }
  
  /*int i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    i++;
  }
  pixels.show();*/
}
