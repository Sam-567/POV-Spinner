
#include <Adafruit_NeoPixel.h>

unsigned long totalTime = 0;
double average;
unsigned long currentTime = 0;

int standard = 530;
int tolerance = 12;
int readPin = A0;

#define PIN 6
#define TRUEPIXELS 28
#define NUMPIXELS 14
#define NUMTURNS 72.0

const  byte PROGMEM image[][72][NUMPIXELS] = { 
 {
 { 38, 170, 208, 123, 233, 255, 239, 208, 167, 218, 217, 239, 24, 0 },
 { 38, 183, 198, 103, 224, 254, 94, 111, 118, 206, 219, 200, 0, 0 },
 { 38, 165, 193, 130, 166, 228, 90, 163, 101, 200, 212, 91, 0, 0 },
 { 37, 168, 185, 185, 35, 172, 204, 184, 150, 186, 155, 1, 0, 0 },
 { 37, 157, 169, 205, 37, 65, 220, 151, 154, 159, 19, 0, 0, 0 },
 { 37, 135, 127, 210, 175, 83, 141, 142, 130, 20, 0, 0, 0, 0 },
 { 36, 120, 57, 177, 217, 225, 169, 169, 0, 0, 0, 0, 0, 0 },
 { 35, 87, 29, 84, 206, 202, 187, 40, 0, 0, 0, 0, 0, 0 },
 { 34, 61, 20, 69, 0, 16, 5, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 26, 21, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 29, 24, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 54, 64, 177, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 104, 143, 175, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 128, 187, 173, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 136, 203, 170, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 121, 193, 165, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 104, 170, 158, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 77, 125, 147, 218, 32, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 23, 39, 121, 218, 120, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 33, 23, 24, 96, 221, 212, 25, 0, 0, 0, 0, 0, 0, 0 },
 { 34, 27, 25, 75, 221, 242, 150, 1, 0, 0, 0, 0, 0, 0 },
 { 33, 28, 28, 54, 208, 245, 244, 142, 0, 0, 0, 0, 0, 0 },
 { 33, 29, 27, 44, 166, 243, 249, 232, 68, 0, 0, 0, 0, 0 },
 { 34, 29, 26, 35, 88, 236, 250, 232, 143, 0, 0, 0, 0, 0 },
 { 34, 29, 25, 30, 29, 209, 222, 218, 116, 0, 0, 0, 0, 0 },
 { 34, 29, 25, 26, 24, 161, 220, 208, 80, 0, 0, 0, 0, 0 },
 { 34, 29, 24, 24, 30, 88, 206, 104, 12, 0, 0, 0, 0, 0 },
 { 34, 29, 23, 21, 33, 12, 55, 0, 0, 0, 0, 0, 0, 0 },
 { 35, 29, 23, 19, 19, 30, 7, 0, 0, 0, 0, 0, 0, 0 },
 { 35, 29, 23, 18, 17, 23, 31, 14, 0, 0, 0, 0, 0, 0 },
 { 36, 29, 23, 18, 17, 27, 25, 28, 32, 22, 123, 112, 22, 0 },
 { 35, 30, 23, 17, 17, 31, 29, 27, 27, 71, 208, 170, 107, 0 },
 { 36, 30, 22, 16, 15, 32, 32, 32, 32, 100, 200, 165, 105, 0 },
 { 36, 30, 22, 16, 14, 28, 31, 31, 32, 78, 171, 162, 56, 0 },
 { 37, 30, 22, 16, 14, 19, 28, 33, 36, 43, 153, 103, 0, 0 },
 { 37, 31, 22, 17, 27, 20, 17, 8, 0, 6, 14, 0, 0, 0 },
 { 38, 32, 23, 18, 30, 20, 9, 1, 0, 2, 5, 0, 0, 0 },
 { 38, 33, 23, 17, 14, 11, 18, 26, 24, 32, 101, 71, 0, 0 },
 { 39, 34, 24, 17, 16, 20, 21, 22, 23, 52, 120, 116, 43, 0 },
 { 40, 34, 25, 17, 18, 26, 27, 29, 31, 84, 173, 151, 107, 0 },
 { 40, 36, 26, 18, 21, 31, 34, 35, 36, 74, 215, 191, 139, 0 },
 { 40, 36, 27, 19, 23, 35, 35, 37, 41, 28, 148, 154, 36, 0 },
 { 41, 37, 28, 21, 24, 33, 39, 22, 0, 0, 0, 0, 0, 0 },
 { 41, 38, 29, 22, 25, 38, 13, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 39, 29, 25, 33, 16, 33, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 39, 32, 28, 30, 42, 183, 85, 9, 0, 0, 0, 0, 0 },
 { 41, 41, 33, 31, 26, 108, 190, 196, 96, 0, 0, 0, 0, 0 },
 { 42, 42, 34, 33, 24, 155, 180, 220, 152, 0, 0, 0, 0, 0 },
 { 42, 42, 36, 38, 53, 183, 229, 247, 190, 0, 0, 0, 0, 0 },
 { 42, 43, 38, 46, 105, 212, 247, 253, 99, 0, 0, 0, 0, 0 },
 { 42, 43, 39, 57, 164, 230, 252, 170, 2, 0, 0, 0, 0, 0 },
 { 42, 43, 37, 87, 213, 246, 187, 3, 0, 0, 0, 0, 0, 0 },
 { 43, 34, 35, 126, 236, 237, 33, 0, 0, 0, 0, 0, 0, 0 },
 { 43, 29, 49, 167, 247, 143, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 43, 61, 163, 207, 252, 49, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 87, 200, 232, 228, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 110, 224, 241, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 118, 233, 246, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 42, 114, 211, 250, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 85, 157, 253, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 40, 44, 65, 253, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 39, 40, 229, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 40, 39, 40, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 40, 112, 43, 90, 7, 32, 16, 0, 0, 0, 0, 0, 0, 0 },
 { 41, 135, 71, 94, 232, 233, 235, 63, 0, 0, 0, 0, 0, 0 },
 { 40, 170, 109, 205, 253, 246, 207, 210, 0, 0, 0, 0, 0, 0 },
 { 40, 180, 165, 247, 180, 79, 183, 178, 175, 39, 0, 0, 0, 0 },
 { 39, 199, 194, 245, 53, 93, 244, 201, 179, 219, 32, 0, 0, 0 },
 { 39, 199, 211, 224, 75, 192, 246, 213, 160, 234, 199, 5, 0, 0 },
 { 39, 181, 221, 145, 193, 242, 77, 179, 105, 230, 244, 112, 0, 0 },
 { 38, 194, 220, 119, 238, 255, 108, 120, 127, 223, 236, 222, 0, 0 },
 { 40, 175, 219, 136, 238, 255, 254, 217, 169, 223, 223, 245, 26, 0 } },
 {
 { 96, 21, 138, 83, 167, 199, 171, 141, 65, 118, 121, 63, 8, 0 },
 { 96, 18, 131, 71, 160, 190, 107, 101, 26, 41, 75, 27, 0, 0 },
 { 96, 24, 125, 92, 122, 177, 142, 138, 14, 8, 15, 24, 0, 0 },
 { 96, 22, 109, 132, 28, 122, 169, 130, 39, 13, 35, 1, 0, 0 },
 { 95, 26, 80, 148, 28, 47, 154, 97, 24, 35, 8, 0, 0, 0 },
 { 96, 33, 38, 153, 123, 59, 86, 72, 40, 10, 0, 0, 0, 0 },
 { 95, 37, 25, 130, 155, 158, 106, 116, 0, 0, 0, 0, 0, 0 },
 { 95, 51, 42, 75, 157, 146, 129, 29, 0, 0, 0, 0, 0, 0 },
 { 94, 55, 53, 39, 0, 12, 4, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 74, 57, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 83, 58, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 101, 69, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 136, 113, 3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 152, 128, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 154, 135, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 142, 142, 2, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 130, 143, 1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 109, 127, 5, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 74, 71, 14, 5, 16, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 75, 67, 24, 7, 26, 24, 0, 0, 0, 0, 0, 0, 0 },
 { 93, 84, 71, 31, 7, 160, 149, 1, 0, 0, 0, 0, 0, 0 },
 { 93, 87, 81, 45, 17, 235, 239, 140, 0, 0, 0, 0, 0, 0 },
 { 93, 88, 81, 64, 54, 236, 243, 229, 69, 0, 0, 0, 0, 0 },
 { 94, 88, 81, 71, 73, 230, 244, 229, 146, 0, 0, 0, 0, 0 },
 { 93, 88, 79, 70, 35, 204, 219, 216, 120, 0, 0, 0, 0, 0 },
 { 94, 87, 79, 68, 36, 158, 217, 207, 83, 0, 0, 0, 0, 0 },
 { 94, 87, 78, 66, 47, 86, 205, 106, 13, 0, 0, 0, 0, 0 },
 { 94, 87, 77, 63, 64, 14, 55, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 87, 76, 62, 59, 58, 8, 0, 0, 0, 0, 0, 0, 0 },
 { 94, 87, 76, 60, 58, 75, 64, 21, 0, 0, 0, 0, 0, 0 },
 { 95, 87, 76, 59, 58, 84, 79, 75, 60, 35, 76, 68, 17, 0 },
 { 95, 87, 74, 58, 58, 88, 86, 84, 82, 78, 110, 88, 71, 0 },
 { 95, 87, 74, 57, 54, 90, 90, 90, 90, 84, 115, 86, 68, 0 },
 { 96, 88, 73, 57, 51, 84, 89, 89, 89, 85, 87, 92, 39, 0 },
 { 96, 87, 73, 57, 47, 65, 82, 85, 81, 86, 88, 72, 0, 0 },
 { 97, 89, 74, 57, 53, 30, 25, 9, 0, 7, 12, 0, 0, 0 },
 { 97, 90, 76, 57, 54, 25, 11, 1, 0, 2, 5, 0, 0, 0 },
 { 97, 91, 76, 57, 47, 45, 51, 55, 49, 59, 72, 53, 0, 0 },
 { 98, 92, 77, 58, 54, 67, 69, 71, 73, 68, 65, 72, 29, 0 },
 { 98, 93, 79, 60, 61, 80, 83, 86, 87, 77, 88, 78, 69, 0 },
 { 99, 94, 81, 62, 68, 88, 92, 93, 94, 85, 120, 104, 88, 0 },
 { 99, 95, 83, 65, 72, 93, 94, 96, 84, 50, 89, 88, 23, 0 },
 { 100, 96, 85, 67, 74, 93, 90, 38, 0, 0, 0, 0, 0, 0 },
 { 100, 97, 87, 71, 75, 84, 18, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 98, 88, 75, 77, 22, 35, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 98, 90, 79, 55, 45, 185, 89, 9, 0, 0, 0, 0, 0 },
 { 100, 100, 92, 82, 44, 110, 191, 196, 97, 0, 0, 0, 0, 0 },
 { 101, 101, 93, 85, 36, 157, 182, 218, 151, 0, 0, 0, 0, 0 },
 { 100, 102, 96, 89, 49, 183, 225, 242, 187, 0, 0, 0, 0, 0 },
 { 101, 102, 99, 89, 32, 208, 241, 248, 98, 0, 0, 0, 0, 0 },
 { 101, 102, 100, 71, 6, 218, 246, 167, 2, 0, 0, 0, 0, 0 },
 { 101, 101, 94, 53, 5, 155, 184, 3, 0, 0, 0, 0, 0, 0 },
 { 101, 85, 92, 43, 11, 31, 30, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 79, 97, 29, 15, 19, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 102, 101, 167, 16, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 117, 185, 10, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 133, 178, 12, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 138, 168, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 135, 157, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 119, 144, 15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 95, 103, 16, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 101, 94, 101, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 87, 100, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 65, 90, 50, 6, 25, 13, 0, 0, 0, 0, 0, 0, 0 },
 { 100, 61, 62, 80, 177, 178, 178, 47, 0, 0, 0, 0, 0, 0 },
 { 100, 46, 27, 145, 180, 191, 130, 150, 0, 0, 0, 0, 0, 0 },
 { 99, 42, 48, 174, 122, 61, 119, 86, 42, 13, 0, 0, 0, 0 },
 { 98, 32, 91, 176, 40, 70, 192, 137, 26, 33, 10, 0, 0, 0 },
 { 98, 27, 124, 159, 57, 153, 215, 153, 40, 14, 35, 2, 0, 0 },
 { 98, 27, 145, 99, 140, 203, 124, 154, 14, 11, 20, 25, 0, 0 },
 { 97, 20, 145, 81, 171, 210, 124, 104, 31, 51, 97, 34, 0, 0 },
 { 97, 21, 145, 91, 171, 209, 197, 149, 66, 124, 122, 72, 8, 0 } },
 {
 { 223, 44, 113, 72, 134, 155, 136, 113, 54, 124, 127, 68, 9, 0 },
 { 224, 37, 108, 62, 130, 148, 148, 115, 25, 45, 78, 34, 0, 0 },
 { 224, 53, 104, 78, 101, 153, 188, 136, 15, 12, 20, 29, 0, 0 },
 { 223, 49, 91, 108, 30, 100, 155, 109, 35, 17, 42, 1, 0, 0 },
 { 223, 58, 68, 122, 32, 47, 123, 79, 27, 43, 9, 0, 0, 0 },
 { 223, 78, 41, 125, 103, 58, 70, 65, 48, 11, 0, 0, 0, 0 },
 { 223, 88, 79, 124, 127, 132, 87, 96, 0, 0, 0, 0, 0, 0 },
 { 222, 123, 128, 115, 134, 123, 107, 25, 0, 0, 0, 0, 0, 0 },
 { 222, 140, 156, 73, 0, 11, 3, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 191, 164, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 206, 165, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 191, 139, 12, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 144, 89, 5, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 143, 63, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 132, 53, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 143, 64, 3, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 151, 85, 3, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 160, 107, 13, 10, 13, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 196, 159, 38, 7, 19, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 197, 183, 65, 9, 29, 24, 0, 0, 0, 0, 0, 0, 0 },
 { 221, 211, 189, 83, 10, 160, 151, 1, 0, 0, 0, 0, 0, 0 },
 { 221, 215, 207, 119, 18, 233, 237, 140, 0, 0, 0, 0, 0, 0 },
 { 221, 216, 207, 160, 55, 234, 240, 229, 70, 0, 0, 0, 0, 0 },
 { 222, 216, 207, 182, 83, 229, 241, 229, 152, 0, 0, 0, 0, 0 },
 { 222, 216, 204, 183, 59, 205, 220, 219, 128, 0, 0, 0, 0, 0 },
 { 222, 215, 204, 182, 75, 157, 218, 211, 88, 0, 0, 0, 0, 0 },
 { 222, 215, 202, 180, 104, 87, 209, 112, 13, 0, 0, 0, 0, 0 },
 { 222, 215, 201, 178, 162, 20, 59, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 215, 201, 177, 169, 139, 15, 0, 0, 0, 0, 0, 0, 0 },
 { 222, 214, 200, 174, 170, 197, 156, 41, 0, 0, 0, 0, 0, 0 },
 { 223, 214, 199, 172, 171, 210, 204, 193, 136, 75, 62, 57, 17, 0 },
 { 223, 214, 198, 171, 170, 216, 214, 211, 208, 151, 66, 58, 60, 0 },
 { 223, 215, 197, 170, 165, 217, 218, 217, 216, 137, 86, 59, 47, 0 },
 { 224, 216, 196, 169, 157, 210, 217, 217, 217, 159, 60, 68, 26, 0 },
 { 224, 215, 196, 168, 149, 180, 206, 205, 190, 196, 75, 59, 0, 0 },
 { 224, 217, 197, 168, 140, 65, 47, 13, 0, 9, 12, 0, 0, 0 },
 { 224, 218, 199, 169, 137, 43, 18, 1, 0, 2, 5, 0, 0, 0 },
 { 225, 219, 200, 169, 149, 147, 153, 149, 130, 148, 75, 49, 0, 0 },
 { 225, 219, 202, 170, 162, 187, 190, 192, 195, 150, 56, 64, 21, 0 },
 { 225, 220, 205, 173, 176, 206, 210, 213, 213, 138, 57, 54, 48, 0 },
 { 226, 221, 207, 177, 187, 215, 219, 220, 221, 165, 81, 73, 66, 0 },
 { 226, 222, 210, 182, 193, 221, 222, 223, 182, 105, 69, 65, 22, 0 },
 { 226, 223, 212, 186, 195, 221, 203, 74, 0, 0, 0, 0, 0, 0 },
 { 227, 224, 215, 192, 195, 191, 33, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 225, 216, 197, 192, 42, 41, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 226, 218, 202, 126, 54, 195, 98, 10, 0, 0, 0, 0, 0 },
 { 227, 227, 220, 206, 95, 120, 197, 203, 103, 0, 0, 0, 0, 0 },
 { 227, 228, 221, 209, 71, 168, 192, 220, 155, 0, 0, 0, 0, 0 },
 { 227, 229, 224, 213, 72, 194, 226, 239, 187, 0, 0, 0, 0, 0 },
 { 228, 229, 227, 204, 40, 213, 239, 245, 97, 0, 0, 0, 0, 0 },
 { 228, 229, 228, 164, 7, 219, 243, 166, 2, 0, 0, 0, 0, 0 },
 { 228, 226, 219, 122, 6, 155, 182, 3, 0, 0, 0, 0, 0, 0 },
 { 228, 205, 218, 97, 14, 35, 30, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 198, 197, 64, 19, 22, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 180, 116, 31, 21, 14, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 163, 99, 14, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 151, 73, 15, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 144, 74, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 143, 78, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 166, 121, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 228, 206, 206, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 216, 227, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 206, 226, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 147, 210, 100, 6, 22, 11, 0, 0, 0, 0, 0, 0, 0 },
 { 227, 132, 152, 121, 147, 143, 140, 38, 0, 0, 0, 0, 0, 0 },
 { 227, 97, 71, 132, 140, 151, 101, 118, 0, 0, 0, 0, 0, 0 },
 { 226, 86, 47, 138, 102, 61, 92, 71, 51, 15, 0, 0, 0, 0 },
 { 226, 65, 77, 138, 44, 68, 149, 106, 28, 42, 12, 0, 0, 0 },
 { 225, 53, 101, 125, 58, 129, 196, 125, 36, 19, 43, 2, 0, 0 },
 { 225, 56, 116, 83, 114, 169, 176, 152, 16, 15, 25, 30, 0, 0 },
 { 224, 40, 117, 69, 137, 167, 159, 114, 28, 55, 100, 41, 0, 0 },
 { 223, 45, 118, 77, 136, 167, 152, 119, 54, 129, 128, 77, 10, 0 } } };


Adafruit_NeoPixel pixels = Adafruit_NeoPixel(TRUEPIXELS, PIN, NEO_GRB + NEO_KHZ800);


void setup() {
  pixels.begin();
  
  Serial.begin(9600);


  int i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(120,120,0));
    i++;
  }
  pixels.show();

  pinMode(readPin, INPUT);
  delay(10000);

  i = 0;
  while (i < TRUEPIXELS) {
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    i++;
  }
  pixels.show();
  
  average = averageSpin();
}

double averageSpin(){
  
  int i = 0;
  unsigned long lastTime = micros();
  unsigned long currentTime;
  while( i < 40 ){
    while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
      delayMicroseconds(50);
    }
    currentTime = micros();
    totalTime += currentTime - lastTime;
    lastTime = currentTime;
    delay(25);
    i++;
  }

  double average = totalTime/40.0;
  return average;
}

void loop() {

  currentTime = millis();
  while ( abs( analogRead(readPin) - standard ) <= tolerance ) {
    delayMicroseconds(100);
  }

  unsigned long CurrentTime = millis();
  
  for (double arg = 0; arg < NUMTURNS; arg++) {
    
    for (int mod = 0; mod < NUMPIXELS; mod++) {
      pixels.setPixelColor( mod, pixels.Color( pgm_read_byte(&(image[0, arg, mod])), pgm_read_byte(&(image[1, arg, mod])), pgm_read_byte(&(image[2, arg, mod])) ) );
    }
    while ( millis() - currentTime < (arg*average)/NUMTURNS){
      delayMicroseconds(100);
    }
    pixels.show();
  }

}
